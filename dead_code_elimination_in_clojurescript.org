#+TITLE: Observations of Dead Code Elimination in ClojureScript
#+AUTHOR: Andrew Mcveigh
#+EMAIL: me@andrewmcveigh.com
#+LANGUAGE: en

* Motivation

  I maintain `cljs-time`, a date and time library for ClojureScript,
  imitating the API of the `clj-time` library.

  Unfortunately, it suffers from a problem with dead code elimination.

  David Nolen suggested it's due the library's use of top-level data
  structures[1].

[1] https://github.com/andrewmcveigh/cljs-time/issues/21


** Procfile, for Heroku deployment
If you want to use this, change the =:tangle no= below to 
=:tangle mysite/Procfile=

#+BEGIN_SRC text :tangle no
web: lein with-profile production trampoline ring server
#+END_SRC

https://developers.google.com/closure/compiler/docs/limitations?hl=en

** Compiler Options

#+BEGIN_SRC clojure :tangle no
{:cache-analysis false
 :main 'cljs-time.dce-compile-test
 :output-to "target/dce-test.js"
 :optimizations :advanced
 :pseudo-names true
 :pretty-print true
}

#+END_SRC

** Observations

80.27K minimized ~= 368.51K with `:pseudo-names` & `:pretty-print`

A function that isn't called is removed

    boot.user=> (test-dce)
    3.05K

    (def parsers
      [:date-element-parser :date-opt-time :date-parser :date-time-parser
       :local-date-opt-time :local-date :local-time :time-element-parser
       :time-parser])

    boot.user=> (test-dce)
    3.05K

    + (.log js/console parsers)

    boot.user=> (test-dce)
    364.40K

    + (def parsers
    +   #js [:date-element-parser :date-opt-time :date-parser :date-time-parser
    +        :local-date-opt-time :local-date :local-time :time-element-parser
    +        :time-parser])

    boot.user=> (test-dce)
    3.05K

    + (.log js/console parsers)

    + (def parsers
    +   ["date-element-parser" "date-opt-time" "date-parser" "date-time-parser"
    +    "local-date-opt-time" "local-date" "local-time" "time-element-parser"
    +    "time-parser"])
   
    boot.user=> (test-dce)
    3.05K

    + (.log js/console parsers)

    boot.user=> (test-dce)
    363.83K

    boot.user=> (test-dce)
    364.30K

    (def parsers
      #js ["date-element-parser" "date-opt-time" "date-parser" "date-time-parser"
           "local-date-opt-time" "local-date" "local-time" "time-element-parser"
           "time-parser"])

    boot.user=> (test-dce)
    3.05K

    + (.log js/console parsers)

    boot.user=> (test-dce)
    3.21K

## Conclusion

A top-level vector that isn't referenced will be removed in DCE.

A top-level vector that is referenced will pull in everything in `cljs.core`,
and possibly everything in a `require`.

A referenced top-level native-js array containing clojurescript keywords will
pull in everything.

A referenced top-level native-js array containing strings will not
pull in anything extra.

    (def formatters {})
    
    boot.user=> (test-dce)
    3.05K

    + (.log js/console formatters)

    boot.user=> (test-dce)
    363.63K

    (def formatters #js {})

    boot.user=> (test-dce)
    3.05K

    + (.log js/console formatters)

    boot.user=> (test-dce)
    3.07K

    (def formatters #js {:test 8})

    boot.user=> (test-dce)
    3.05K

    + (.log js/console formatters)

    boot.user=> (test-dce)
    3.07K

    (def formatters #js {:test {:test2 []}})

    boot.user=> (test-dce)
    3.05K

    + (.log js/console formatters)

    boot.user=> (test-dce)
    363.75K

    (defn formatters []
      {:something ["something"]})

    boot.user=> (test-dce)
    3.05K

    + (.log js/console formatters)

    boot.user=> (test-dce)
    363.82K

## Conclusion

ClojureScript data structures require quite a large amount of js

    (ns cljs-time.dce-compile-test
      (:require
       [cljs-time.core :as time]))
    
    boot.user=> (test-dce)
    6.33K

    (.log js/console (time/date-time 2014))

    boot.user=> (test-dce)
    25.70K

    (.log js/console (time/plus (time/date-time 2014) (time/months 1)))

    boot.user=> (test-dce)
    451.86K
    ; or without :pseudo-names & :pretty-print
    101.79K

## Whoa!

    (ns cljs-time.core
      (:refer-clojure :exclude [= extend second])
      (:require
       [cljs-time.internal.core :as internal :refer [leap-year? format]]
       [clojure.string :as string]
       goog.date.Interval)
      (:import
       goog.date.Date
       goog.date.DateTime
       goog.date.UtcDateTime))

boot.user=> (test-dce)
2.27K

boot.user=> (test-dce)
79.96K

# TODO

 * Get a base size for cljs
 * Decide which optimization to measure
 * Write the whole thing in code / literal style!


#+BEGIN_SRC clojure :tangle src/cljs_time/core.cljs
(ns cljs-time.core
  (:require
   [clojure.string :as string])
  (:import
   [goog.date Date DateTime UtcDateTime Interval]))

(def period-fns
  {:millis (fn [date op value]
             (let [ms (op (.getTime date) value)]
               (doto date (.setTime ms))))
   :weeks  (fn [date op value]
             (let [days (op 0 (* value 7))]
               (doto date
                 (.add (Interval. Interval.DAYS days)))))})

(def periods
  {:seconds Interval.SECONDS
   :minutes Interval.MINUTES
   :hours   Interval.HOURS
   :days    Interval.DAYS
   :months  Interval.MONTHS
   :years   Interval.YEARS})

#+END_SRC


* The Test

#+BEGIN_SRC clojure :tangle src/cljs_time/core.cljs

(.log js/console (period-fns :weeks))

#+END_SRC

#+BEGIN_SRC clojure :tangle build.boot

(set-env!
 :source-paths #{"src"}
 :dependencies '[[org.clojure/clojure "1.7.0"]
                 [org.clojure/clojurescript "1.7.228"]])

(require '[cljs.build.api :as cljs])
(require '[cljs.closure :as closure])
(require '[clojure.java.io :as io])

(defn compile-size [namespace]
  (let [uri (:uri (closure/cljs-source-for-namespace namespace))
        outfile "target/dce-test"
        js (cljs/build uri
                       {:cache-analysis true
                        :main namespace
                        :output-to outfile
                        :optimizations :advanced
                        :pseudo-names true
                        :pretty-print true})
        length (.length (io/file outfile))]
    (println (format "%.2fK" (double (/ length 1024))))))

;; (compile-size 'cljs-time.core)

#+END_SRC
